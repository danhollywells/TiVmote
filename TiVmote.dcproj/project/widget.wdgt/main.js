/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function pauseButtonHandler(event)
{
var CMD = '/usr/bin/ruby ./tivo_telnet_command.rb 192.168.1.4 IRCODE PAUSE'
    // Insert Code Here
    window.widget.system(CMD,null);
    // http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/Dashboard_Ref/GadgetObj/GadgetObj.html        
        
}

function buttonCallbackHandler(e) {
    alert('button callback: ' + e.outputString);

}





// GET TIVO ADDRESS
// user supplied address
// OR
// To find the tivo on the network
// loop over current network address range 
// `nslookup localhost | awk '/Server/ {print $2}'` 
// nslookup 192.168.1.4 | awk '/TIVO/ {print $4}' | sed 's/\..*//'
// try to connect to that address on the telnet port
// save that address in the config 
// use a database or plist to store config?


function buttonClickHandler(event)
{
    // Insert Code Here
    buttonPressed = jQuery(event.target).parent().parent('div').attr('id').split('button')[1].toUpperCase();
    
    var CMD = '/usr/bin/ruby ./tivo_telnet_command.rb 192.168.1.4 IRCODE '+buttonPressed
    // Insert Code Here
    window.widget.system(CMD,null);
    // http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/Dashboard_Ref/GadgetObj/GadgetObj.html        

}
